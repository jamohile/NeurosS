{"version":3,"sources":["../Brain.js"],"names":["Object","defineProperty","exports","value","Brain","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_Neuron","require","_Neuron2","_interopRequireDefault","_evoHelpers","obj","__esModule","default","_classCallCheck","instance","TypeError","_ref","_ref$neurons","neurons","inputs","outputs","parseIO","_this","forEach","n","type","Types","INPUT","push","OUTPUT","cross","a","b","c","Math","max","nA","nB","random","rndTrinary","rndBool"],"mappings":"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","file":"Brain.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Brain = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Neuron = require(\"./Neuron\");\n\nvar _Neuron2 = _interopRequireDefault(_Neuron);\n\nvar _evoHelpers = require(\"./evoHelpers\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Brain = exports.Brain = function () {\n    function Brain(_ref) {\n        var _ref$neurons = _ref.neurons,\n            neurons = _ref$neurons === undefined ? [] : _ref$neurons;\n\n        _classCallCheck(this, Brain);\n\n        /**\r\n         * @type {Neuron[]} neurons\r\n         * @type {Neuron[]} inputs\r\n         * @type {Neuron[]} outputs\r\n         */\n        this.neurons = neurons;\n        this.inputs = [];\n        this.outputs = [];\n        this.parseIO();\n    }\n\n    /**\r\n     * Iterate through neurons,\r\n     * push inputs and output into their buffers.\r\n     */\n\n\n    _createClass(Brain, [{\n        key: \"parseIO\",\n        value: function parseIO() {\n            var _this = this;\n\n            this.neurons.forEach(function (n) {\n                switch (n.type) {\n                    case _Neuron.Types.INPUT:\n                        _this.inputs.push(n);\n                        break;\n                    case _Neuron.Types.OUTPUT:\n                        _this.outputs.push(n);\n                        break;\n                }\n            });\n        }\n\n        /**\r\n         * Breed two brains to return a third brain.\r\n         * @param {Brain} a\r\n         * @param {Brain} b\r\n         * @return {Brain}\r\n         */\n\n    }], [{\n        key: \"cross\",\n        value: function cross(a, b) {\n            var c = {\n                neurons: []\n            };\n            for (var i = 0; i < Math.max(a.neurons.length, b.neurons.length); i++) {\n                /**\r\n                 * Get the neuron at this index for both neurons.\r\n                 * This may be undefined for one neuron.\r\n                 * @type {Neuron} nA\r\n                 * @type {Neuron} nB\r\n                 */\n                var nA = a.neurons[i];\n                var nB = b.neurons[i];\n\n                if (nA && nB) {\n                    if (Math.random() < 0.995) {\n                        c.neurons.push((0, _evoHelpers.rndTrinary)(nA, nB, _Neuron2.default.cross(nA, nB)));\n                    } else {\n                        c.neurons.push(nA, nB);\n                    }\n                } else if ((0, _evoHelpers.rndBool)()) {\n                    c.neurons.push(nA || nB);\n                }\n            }\n            return new Brain(c);\n        }\n    }]);\n\n    return Brain;\n}();\n//# sourceMappingURL=Brain.js.map"]}